#!/usr/bin/env python
ondemand_dhcp_http_script_b64=""
import sys, os
sys.path.append("/pkg/bin/")
from ztp_helper import ZtpHelpers
import base64
import json, tempfile
from pprint import pprint


class ZtpFunctions(ZtpHelpers):

    def bootstrap_config(self):
        # The hash for the password in config below translates to "lab"
        # So root-user credentials will be netops/lab
        # This is a sample bootstrap configuration.
        config = """ !
                     username netops
                       group root-lr
                       group cisco-support
                       secret 5 $1$7kTu$zjrgqbgW08vEXsYzUycXw1
                       !
                     !
                     ssh server v2
                     ssh server vrf default
                     !
                     end"""



        with tempfile.NamedTemporaryFile(delete=True) as f:
            f.write("%s" % config)
            f.flush()
            f.seek(0)
            result = self.xrapply(f.name)

        if result["status"] == "error":

            self.syslogger.info("Failed to apply root user to system %s"+json.dumps(result))

        return result


    def decode_and_place_script(self):
    	# Place the ondemand script in hardisk: (/misc/disk1)
        with open('/misc/disk1/shifting_ztp_server.py', 'wb') as ondemandfh:
            ondemandfh.write(base64.standard_b64decode(ondemand_dhcp_http_script_b64))



if __name__ == "__main__":

    ztp_script = ZtpFunctions()

    # Apply the bootstrap configuration
    result = ztp_script.bootstrap_config()
    if result["status"] == "error":
    	ztp_script.syslogger.info("Failed to apply bootstrap_config, exiting...")
    	sys.exit(1)

    ztp_script.decode_and_place_script()

    # Download the ZTP script for the next CSS node based on the known bootfilename
    ztp_script.download_file(file_url=eval(os.environ["new_bootfile_name"]),
                             destination_folder='/misc/disk1/ztp/')
